package ru.golovanov.mapper

import org.mapstruct.Mapper
import org.mapstruct.ReportingPolicy
import ru.golovanov.dto.ActionMessage
import ru.golovanov.enums.ActionType
import java.time.Instant
import java.time.ZoneId
import java.time.format.DateTimeFormatter
import java.util.Locale

@Mapper(
    componentModel = "spring"
)
abstract class ActionMapper {

    val formatter: DateTimeFormatter =
        DateTimeFormatter.ofPattern("d MMMM yyyy, HH:mm", Locale("ru"))

    fun toPrettyString(message: ActionMessage): String {
        val formattedTime = message.time.format(formatter)

        return """
            ‚úÖ ${actionEmoji(message.actionType)} ${actionLabel(message.actionType)} –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ [${message.repository}]:
            
            üîß –°–æ–æ–±—â–µ–Ω–∏–µ: ${message.message}  
            üë§ –ê–≤—Ç–æ—Ä: ${message.author}  
            üìÖ –í—Ä–µ–º—è: $formattedTime  
            üîó ${message.link}
        """.trimIndent()
    }

    private fun actionEmoji(type: ActionType): String = when (type) {
        ActionType.COMMIT -> "‚úÖ"
        ActionType.MERGE -> "üîÄ"
        ActionType.PULL_REQUEST -> "üì¶"
        ActionType.ISSUE -> "üêû"
        ActionType.RELEASE -> "üöÄ"
    }

    private fun actionLabel(type: ActionType): String = when (type) {
        ActionType.COMMIT -> "–ù–æ–≤—ã–π –∫–æ–º–º–∏—Ç"
        ActionType.MERGE -> "–°–ª–∏—è–Ω–∏–µ –≤–µ—Ç–æ–∫"
        ActionType.PULL_REQUEST -> "Pull Request"
        ActionType.ISSUE -> "–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞"
        ActionType.RELEASE -> "–ù–æ–≤—ã–π —Ä–µ–ª–∏–∑"
    }
}